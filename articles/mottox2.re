= 管理画面から始めるUIデザイン

この章では、Webエンジニアが管理画面の実装を任されたときに、それなりに使いやすい画面を作れるようになるためのポインについて書いていきます。

UIに対して自信を持って作れるようになると、デザイナーとの議論が深まったり、実装の速度が上がってユーザーにとってより良いサービスを提供できます。

まずはなぜ管理画面なのか？という点を確認して、具体的に考えるポイントを示していきます。

== なぜ管理画面なのか

C向けサービスにとって管理画面はデザイナーが手をつけづらくエンジニアだけで完結するケースが求められる。

B向けサービスは、サービス自体が管理画面のような形態を取ることが多いですが、主要画面以外の手の回りづらい箇所や社内用の管理画面はエンジニアに一任されるケースもあるのではないでしょうか？

あまりにも大きな自社サービス企業以外では、誰もが直面する実装が管理画面だと思います。

こういう事態が起こる背景には「圧倒的なデザイナー不足」があります。

そもそも、デザイナーと言っても多種多様で、情報/画面設計が得意な人もいれば、ビジュアルを作るのが得意な人、印刷物専門の人などもいて一概にデザイナーといっても使いやすいUIを作れるとは限りません。

ここ最近でいうとnoteというWebサービスを中心に、Webサービスやスマフォアプリに特化したUIデザイナーの活動が盛り上がっていますが、こういったデザイナーを何人も囲えている会社などごく少数に過ぎません。

これはエンジニアにとっての好機です。管理画面はUI設計をしていくのにピッタリな題材です。

「エンジニアリングがちょっとわかる営業/マーケ」のように専門性を持ちつつ、分野を横断できるといろんな可能性を広げられます。この好機を生かして「デザインがちょっとわかるエンジニア」になってサービスをよくしていきましょう。

=== 管理画面の性質

なぜ管理画面がUI設計をしていくのにピッタリなのでしょうか？

それには次のような理由があります。

 * 確実に使ってもらえて、フィードバックも得やすい
 * 利用者の目的がはっきりしている
 * 華美な装飾でごまかすことができない
#@#  * 見せ方次第で成果になりうる

==== 確実に使ってもらえて、フィードバックも得やすい

「ものをつくったら確実に使ってもらえる」という状況は実は多くありません。管理画面は相当下手なことをしなければ使われないということはありません。イージーモードです。@<fn>{heta}

//footnote[heta][ただし、下手なものをつくったら1週間後には使われなくということがあります。]

また、最悪利用状況が芳しくなくても、利用者が社内にいるため使われないの理由を簡単に聞けます。

つくったら確実にフィードバックがあるというのが1つめの理由です。

==== 利用者の目的がはっきりしている

普通のサービスの利用者は流入経路やコンバージョンのバリエーションが豊富です。

そのためそういった人たちをうまく誘導する画面設計をするのは非常に難しいです。

しかし、管理画面であれば、利用者は特定のタスクを実行するためにために訪れている人がほとんどで動きを想定しやすいです。

利用者の意図を想像しやすいというのが2つめの理由です。

==== 華美な装飾でごまかすことができない

エンジニアで管理画面を作る必要がある時点で、華美な装飾でごまかすことは出来ないでしょう。

そもそもそんな時間をかけられないというケースが大半だと思います。

こういった状況の中では、表示する情報、画面の分け方、ボタンの配置など使い勝手で質を担保するしかなくなります。

見た目でごまかせず使い勝手で差がつくというのが3つめの理由です。

#@# ==== 見せ方次第で成果になりうる
#@# 教育コストという概念

　

こういった理由から、エンジニアがUIデザインを始めるのに管理画面はピッタリです。

それでは、画面のUIを考えていく時に使えるテクニックを紹介します。

#@# NOTE: UIじゃないから入れるか微妙

#@# ====[column] 管理画面を作る必要があるのか？

#@# 一度原点に立ち返ってみると、利用者のタスクを実行出来るようにすることが管理画面の目的です。

#@# Excel

#@# ====[/column]

== 画面設計のヒント

=== その画面、誰のためのものか？
会社規模が数人である場合を覗いて、管理画面を使うのは主に営業やカスタマーサポート、サービスによっては外部の協力者が使うことになると思います。

エンジニアや経営陣クラスの人が使うのであれば、ある程度リテラシーが高く前提のもと多少わかりにくくても許されるかもしれません。

しかし、営業やカスタマーサポートの方が常にリテラシーが高いとは限りません。また、派遣社員やアルバイトを採用して管理画面で業務を行う場合であると、かなりリテラシーのレベルに差がついていくでしょう。

管理画面のUIデザインを行っていく上では「こういった人たちが使うことを想定する」ことが第一歩目になります。

==== ヘビーユーザーとライトユーザー

さらに対象について深掘ってみましょう。

ユーザーの習熟度に着目すると管理画面は一般的なWebサービスと同様にヘビーユーザーとライトユーザーが存在します。

ヘビーユーザーというのは社歴が長くエンジニアに改善提案を行ってくれるような方で、会社業務の中でも中心的な役割を果たしていることが多いです。

一方、ライトユーザーはマニュアル化された業務だけを管理画面で行う人であったり、会社に入りたてで管理画面を触り始めたユーザーです。

管理画面の開発で行っていく上で注意したいのは、管理画面の改善提案を行ってくれる方はほぼヘビーユーザーであることです。

声を上げるのは（ほぼ）常にヘビーユーザーで有ることが多いです。「ユーザーの声を聞け」という言葉はよく言われますが、ユーザーの声には偏りがあります。

これが結構落とし穴だと思っていて、ヘビーユーザーの要求をそのまま実装するだけだと無限に機能が増えてしまい実装も複雑になっていくっていきます。

結果的に、ライトユーザーの学習コストがどんどん高くなっていきます。

　

ここで大事なのは、声を上げているユーザーはごく少数であることを認識することです。

Webサービスと同様に声を上げないユーザーの方が多く、その人たちは必ずしもPCリテラシーやドメイン知識に富んでるとは限りません。

そういったユーザーを認識することがUI構築の第一歩になります。

#@# TODO: 以下まとまらなかったのでSKIP

#@# ここでライトユーザーに合わせればいいかと思ってしまいがちですが、そうではありません。

#@# どの習熟度のユーザーに合わせるかという課題に関して「About Face」@<fn>{about-face}という本の中@<fn>{about-face-content}では、プロダクトを使うほとんどのユーザーはビギナーでもなく専門家でもない、中級者であり、そういった中級者向けにデザインすべきとしています。

#@# //footnote[about-face][https://www.amazon.com/About-Face-Essentials-Interaction-Design/dp/1118766571]

#@# //footnote[about-face-content][CH10 Optimizing for Intermediates]

#@# ここで初心者に合わせない理由としては、「ユーザーは初心者でありたいわけではない」ことで初心者は比較的短い期間で中級者に移行するためです。

#@# では、中級者向けのUIはどうやって構築すればいいのかというと、使用頻度の高い機能はアクセスしやすい場所に、あまり使われないが便利な機能はメニューなどに入れておくことです。

=== ボタンのヒント

ボタンは開発者が一番追加しやすいがために、画面が煩雑になりやすいパーツです。

ボタンは増えれば増えるほど画面の複雑製を増します。特に近年スマートフォンアプリになれしたしんだユーザーから見るとボタンの多い画面は敬遠されがちです。

そこでMaterial DesignのButtonからエンジニアが見るべきボタンの事柄について抑えておきましょう。

Googleが作成しているUIデザインのフレームワークであるMaterial DesignではボタンのTypeとして4つ挙げられています。

//image[buttons][Button Type]

 1. Text Button (low emphasis)
 2. Outlined Button (medium emphasis)
 3. Contained button (high emphasis)@<fn>{3-button}
 4. Toggle button

//footnote[3-button][日本ではゴーストボタンともいわれてます]

ボタンと言えば3番のContained buttonを連想する方が多いのではないでしょうか？

ここで注目してほしいのはemphasis（強調）です。1,2,3の順にemphasisが強くなっています。

強調はどのように決められるでしょうか？タスクの優先度です。

基本的には、その画面におけるタスクの優先度が強調度と連動します。

例としてGitHubの画面を挙げます。

//image[button-example][GitHub Issue]

ここで画面のボタンを分類してみましょう。

@<b>{3. Contained Button}: New issue, Comment

@<b>{2. Outlined Button}: Edit, Close issue, Unsubscribe

@<b>{1. Text Button}: Assignees, Labels, Projects, MildeStone, ...

GitHubを使っている方はわかると思いますが、タスクの優先順と見事に一致しています。

また、この優先度というのは習熟度とも一致しています。実はこの画面、Contained Buttonだけあれば最悪GitHubの利用には差し支えありません。

また、Text Buttonは「よりサービスをうまく利用するための機能」に割り振られていることに気づくことでしょう。

この強調という概念を使えば、初心者にも優しく、上級者にとっても満足できるUIを構築することが可能になります。

==== 考えるコツ

実際に自分でUIを構築していくときにはどう考えていくべきでしょうか？

一番簡単なのは「Contained Buttonは画面に1つ」という考え方です。

その画面中で一番大切な要素をContained Button（色付きボタン）、それ以外のボタンはOutlined Button（アウトライン もしくは 灰色のボタン）とすることです。

=== 色のヒント

エンジニアが作ると、非常に単純になってしまうのが色。色を効果的に使うことで、アクションの意味合いや情報の優先度をコントロールすることができます。

==== 強調する色、抑制する色

先ほどのボタンの例は色による強調を行いました。ボタンでは色をつけることで要素を強調させましたが、強調を弱める方法もあります。

@<img>{color}のように、氏名とふりがなが並ぶ時に、ふりがなの文字色に黒ではなく灰色を使うことで氏名の方が強調されているように見えます。

//image[color][色で強調を弱める例]

このように文字色に変化をつけることで、伝えたいことや、補足情報であることを簡単に示すことができます。

実際のWebデザインでは2色ではなく、黒系の色だけでもヘッディング(h1, h2...)・本文・補足のテキスト用に3色あるいは4色ぐらいで運用しているサイトも見られます。

例としては次のように色を分けるだけでもメリハリのある画面を作ることが出来るでしょう。

 * ヘッディング #222
 * 本文 #444
 * 補足 #777 ~ #999

==== 意味をもつ色

色は強調だけでなく意味づけにも使えます。色の情報があれば@<img>{color-meaning}のように周辺情報がなくてもそれがなにを意味するかわかります。

//image[color-meaning][色の意味]

①は、数字に対して、緑と赤を並べてみました。黒字と赤字を示しています。

②の人間のアイコンはトイレのアイコンです。色を見れば左が男性、右が女性というのが伝わります。

③のボタンは赤背景ですが、取り返しのつかないボタンに見えるでしょうか？

④の黄色に出口と書いている絵は鉄道の駅の出口を示しています。

これらの情報、ほとんど伝わったのではないでしょうか？色ごとに赤は情熱、青はクールなどの印象とは別に、身の回りの慣習や慣れによって意味を推測させることもできます。

こういった意味を持った色を使うことで、より使いやすく伝わりやすいUIを構築することができます。

ただし、色覚異常をもつユーザーが一定数いることや国・文化によって通じない事象が発生することもあるので、多様は厳禁です。

文字を見ただけでわかる状態は担保しつつ、色で意味をより伝わりやすくするというのがいいでしょう。

実際に管理画面で使うことが多いのはポジティブ/ネガティブな数値であることを示す緑/赤（①の例）、削除ボタンの赤（③の例）でしょう。

=== タイポグラフィのヒント

次に取り上げるのがタイポグラフィです。

管理画面に関していえば、フォントサイズとウェイトを気にしたいです。

==== フォントサイズとウェイト

フォントサイズはボタンや色で説明したように強調を操ることができます。

先ほどの名前とふりがなの例に対してされにフォントサイズの差をつけてみました。

//image[font-size][フォントサイズでの強調例]

ここでも重要な情報は大きく、補足的な情報を小さくすることで、常用な部分を強調することができます。最初と比べて非常にメリハリがある見た目になったと思います。

またこれに加えて、@<img>{font-weight}のように太字で強調という方法もあります。

//image[font-weight][太字での強調例]

このように色、タイポグラフィの組み合わせで、初心者にも必要な情報は強調しつつ、他の補足的情報は強調されすぎないように画面をつくっていくといいでしょう。

==== 行間

タイポグラフィにおいてエンジニアに見落とされがちな要素として「行間」というものがあります。

文字どおり、行と行の間の空間なのですが、CSSフレームワークのデフォルトのまま使っている例が多々見られます。

ただ、これは英語圏でのデフォルトなので、実は日本語に適用すると少しきつめな印象を与えてしまいます。

ここで@<img>{line-height}にline-height@<fn>{line-height}が1.5, 1.7で日本語、英語の文章を表示してみした。

//footnote[line-height][CSSで行間を変更するプロパティ]

line-height: 1.5というのは、Bootstrap@<fn>{bootstrap}のデフォルト値です。日本語を見ると少しきつめな印象を持ちませんか？

//footnote[bootstrap][もっとも有名なCSSフレームワークの1つ]

一方line-height: 1.7では日本語の文章はゆとりがあって読みやすくなります。

よって、日本語で海外のCSSフレームワークを使う時は少し行間を広めにして使うのがよいでしょう。

//image[line-height][行間と言語]


#@# BootstrapなどのCSSフレームワークでは通常 primary, secondary, success, danger, warning, infoなどの色が用意されています。@<fn>{colors}

#@# エンジニアとしてはこれらの色をうまく使えるようになることを意識したいところです。


#@# === ユーザーの黄色信号を受け取る

#@# UIを構築する上で、実際にユーザーの


#@# ユーザーサポートなら、電話しながらどういう操作をしているか
#@# 営業の人はどうやって営業しているか

#@# 出来ている人には当たりまえなんだけど

#@# - 検索フォームつけてるのに Ctrl(or Cmd) + Fで検索
#@# - 複数タブを行ったり来たりしてなんかやってる
#@# - シークレットモードを使いながら操作している
#@# - 営業資料（or 社内資料）作成で、手動とかスプレッドシートで数えていたり
#@#   - CSVダウンロードつけてって話とかは経緯を聞く
#@# - なんかExcelでデータ加工している


== まとめ

ここまでボタンや色、タイポグラフィを取り上げたのですが、すべてに共通していたのが強調・優先度という概念です。

優先度をつければ情報にメリハリが出て見るべき情報がわかりやすくなります。また、色やアイコンを用いて情報の補助とすることで画面上の少ない領域でよりわかりやすく情報を伝えることができます。

実際に新しい画面を作る時は、その画面で初心者のタスクを達成するためにはなにが必要なのか？を考えて、中級者、上級者の使うものと考えていくことで優先度をつけることができます。

また、新しい機能を足す時も、単純に足すのではなくて、どのぐらいの優先度なのかを考えつつ今ある機能の優先度を落としたりすることでUIは格段によくなります。










#@# ==== エラー表示

#@# エラー表示ちゃんとやっていますか？

#@# WarningとErrorの違い

//footnote[colors][https://getbootstrap.com/docs/4.1/utilities/colors/]


#@# ==== ローディング

#@# ==== 文言

#@# ==== ツールチップ


#@# === ボタンが1つしか置けない世界

#@# 管理画面はつくっているとついついボタンが並んでしまったり、表示量が多くなってしまうことはありませんか？

#@# そういった場合、機能の優先度が判断できていない場合が多いです。

#@# これに対する処方箋が「ボタンが1つしか置けない場合にどうするか？」という考え方です。


#@#  * ユーザーサポート
#@#  * 登録電話
#@#  * コンテンツのモデレーション

#@#  === タスク

#@#  * 記事を書く




#@# 黄色信号


#@# === ボタンが1つしか置けない世界

#@# 管理画面はつくっているとついついボタンが並んでしまったり、表示量が多くなってしまうことはありませんか？

#@# そういった場合、機能の優先度が判断できていない場合が多いです。

#@# これに対する処方箋が「ボタンが1つしか置けない場合にどうするか？」という考え方です。


#@#  * ユーザーサポート
#@#  * 登録電話
#@#  * コンテンツのモデレーション

#@#  === タスク

#@#  * 記事を書く




#@# 黄色信号

#@# ユーザーサポートなら、電話しながらどういう操作をしているか
#@# 営業の人はどうやって営業しているか

#@# 出来ている人には当たりまえなんだけど

#@# - 検索フォームつけてるのに Ctrl(or Cmd) + Fで検索
#@# - 複数タブを行ったり来たりしてなんかやってる
#@# - シークレットモードを使いながら操作している
#@# - 営業資料（or 社内資料）作成で、手動とかスプレッドシートで数えていたり
#@#   - CSVダウンロードつけてって話とかは経緯を聞く
#@# - なんかExcelでデータ加工している





#@# === オブジェクトベースの画面


