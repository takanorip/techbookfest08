= エンジニアのためのUIデザイン概論

近年、UIデザインという言葉はいろいろな場面で使われるようになり、Web業界で働いていればデザイナーでなくとも頻繁に見聞きする言葉でしょう。
関連する書籍やブログなども数多く書かれており、「UIデザイナー」という職種までできています。

しかし、「UI」や「UIデザイン」などの言葉は知ってるけど具体的な定義や内容についてはわからない、というエンジニアもまた多いのではないかなと思います。
UIデザインについて勉強したいなと思っても、具体的な内容がわからないと何をしたらよいのかわからなくなってしまいますよね。

この章では、そんなエンジニアの方々ために、エンジニア目線で「UIデザイン」について解説します。

== UIとは？
UIは「ユーザーインターフェイス（User Interface）」の略です。
Interfaceは「境界面、接点、つなぎ目」と訳される言葉で、UIとは「ユーザーとの接点、つなぎ目」という意味になります。

では何とのつなぎ目なのかというと、それは「道具（コンピュータ）」です。
この言葉はコンピュータに関連したもののみを指す言葉ではなく、車などのユーザーが操作できる道具全般に用いられます。
そのため、車のハンドルやインジケータ、ドアノブなど画面に表示されないものも広義のUIであるといえます。
（車などの機械は「機械と利用者」ではなく「機械と人間」という関係で語られることも多いため、ヒューマンマシンインターフェース（HMI）という言葉が使われる場合もあります。）

特に今日では、コンピュータとユーザーが情報のやり取りをするインターフェースを指して「UI」ということが多いです。
普段私達が使っている「UI」もこちらの場合がほとんでしょう。

=== コンピュータのUIの歴史

ここでコンピュータのUIがどういう変遷を歩んできたのか振り返ってみたいと思います。

==== Character User Interface（CUI）
CUIは1960年代後半に登場したUNIXに搭載されたユーザーインターフェースで、キーボード入力と画面の文字表示のみでコンピュータを操作します。
UNIX登場以前は、パンチカードや紙テープを使用してコンピュータを操作していましたが、CUIの登場によりコンピュータを直接操作できるようになりました。

しかし文字入力でしか操作できないため操作が難しく、専門的な知識を持っていないとコンピュータを扱うことができませんでした。

==== Graphical User Interface（GUI）
CUIのわかりにくさを解決したのがGUIです。
GUIはキーボードだけでなくマウスのカーソルなどを使いコンピュータを操作するユーザーインターフェースで、MacintoshやWindowsの登場により普及しました。

CUIのようにプログラマブルに操作することは難しいですが、視覚的にわかりやすく、誰でも簡単で直感的に操作できるようになりました。
GUIの登場でコンピュータとユーザーの距離は非情に近くなったといえます。
現代ではコンピュータだけでなくあらゆる機械にGUIが採用されています。

私達が普段開発しているウェブサイトやアプリケーションも、このGUIに分類されます。

==== Natural User Interface（NUI）
近年注目を集めているのがNUIと呼ばれるユーザーインターフェースです。
これは人間の自然な動作（触る、動く、話す）によってコンピュータを操作するインターフェースです。

この例としてはスマートフォンのスワイプ、AppleのSiriやGoogleの音声アシスタント、ジェスチャーで操作するゲームなどが挙げられます。
人間の動作をユーザーインターフェースに取り入れることによって、より自然で直感的に操作できるようになります。

NUIの登場によって、よりコンピュータとユーザーの心理的距離が近くなり、コンピュータが身体の一部のように感じられるようになりました。
将来的には、コンピュータとユーザーの距離が限りなく0に近くなりコンピュータの存在を感じることなくアプリケーションを操作できるようになるでしょう。

==== WebのUI

== UIデザインとは？

では、UIデザイン、すなわち「ユーザーインターフェースをデザイン」とは具体的にどのようなものを指すのでしょうか？
ここではUIデザインをいくつかの要素に分割して考えてみたいと思います。

=== 情報デザイン

UIをデザインするにあたって、まずは@<b>{「画面にどのような情報を表示し、ユーザーにどんな情報を伝え、どんな行動を促すのか」}をデザインしなければなりません。
これを情報デザインと呼びます。

情報デザインはUIデザイナー以外にディレクターやプロダクトマネージャーが行う場合もあります。
これはチーム構成やプロジェクトの進め方に依存します。

情報デザインで重要なポイントは@<b>{3つ}あります。

  1. @<b>{「ユーザーにどんな情報を伝えたいのか」を整理すること}
  2. @<b>{「ユーザーに伝える情報の流れ」をデザインすること}
  3. @<b>{「ユーザーにどんな行動を促すのか」を明確にし、そこに自然に向かうようにデザインすること}

情報設計ではHCD（人間中心設計）やUCD（ユーザー中心設計）と呼ばれる設計手法を用いることもあります。
興味のある方は調べてみるとよいでしょう。

参考リンク：

=== 画面デザイン

画面に表示する情報が整理できたら、その情報をどうやって伝えるかデザインします。
これを画面デザインといいいます。
一般的にUIデザインというとこの画面デザインを指すことが多いです。

==== 情報の構造化

画面デザインで重要なポイントは@<b>{「情報を構造化する」}ことです。

テキストやボタンなどが無秩序に羅列されているだけではユーザーが混乱してしまいます。
ユーザーが必要な情報や機能にアクセスしやすいように情報を構造化し、ユーザーがより直感的に情報にアクセスできるようにすることが重要です。

この情報の構造化は、普遍的な原則や概念を用いて@<b>{論理的}に行われます。
この原則・概念については後ほど詳しく解説します。
そして、この構造化された情報の「表現方法」や「ビジュアル」についてデザインするのがウェブデザインだといえます。
（ウェブデザインにはこの画面デザインも含む場合もあります。）

==== ワイヤーフレーム

ワイヤーフレームとは平たくいえば@<b>{「画面の設計図」}です。
ビジュアルデザインをせず、構造やパーツの配置について確認するために作られます。
画面デザインの一般的なアウトプットの形式でもあります。

UIデザインをこのワイヤーフレームをつくる作業だと考えている人もいるみたいですが、それはちょっと違うでしょう。
なぜならワイヤーフレームはUIデザインの1工程に過ぎないからです。

=== ユーザビリティ

ユーザビリティはUIデザインの重要な指標です。
これは、単なる「使いやすさ」を表す指標ではありません。
しかし、具体的な定義が複数あり、関連学会でも合意された定義はまだ確立されていません。
ここでは2つの定義を紹介します。

==== ISO 9241-11

ISO（国際標準化機構）の国際規格であるISO 9241-11@<fn>{ISO9241-11}では、ユーザビリティは@<b>{「ある製品が、指定されたユーザーによって、指定された使用状況下で、指定された目的を達成するために用いられる際の有効さ、効率、利用者の満足度の度合い」}と定義されています。
このISO 9241-11はJIS Z 8521@<fn>{JISZ8521}として日本語訳されています。

//footnote[ISO9241-11][https://www.iso.org/standard/16883.html]
//footnote[JISZ8521][https://webdesk.jsa.or.jp/books/W11M0090/index/?bunsyo_id=JIS%20Z%208521:1999]

この規格の用語については次のように定義されています。

  * @<b>{利用者}：製品とやりとりする人間。
  * @<b>{利用の状況}：利用者、仕事、装置（ハードウェア、ソフトウェア及び資材）、並びに製品が使用される物理的及び社会的環境。
  * @<b>{目標}：意図している結果。
  * @<b>{有効さ}：利用者が、指定された目標を達成する上での正確さ及び完全さ。
  * @<b>{効率}：利用者が、目標を達成する際に正確さと完全さに関連して費やした資源。
  * @<b>{満足度}：不快さのないこと、及び製品使用に対しての肯定的な態度。

==== ヤコブ・ニールセン

ユーザビリティの権威であるヤコブ・ニールセンは著書「ユーザビリティエンジニアリング原論」の中で、インタフェースのユーザビリティは、5つの特性からなる、多角的な構成要素を持っていると定義しています。

  1. @<b>{学習しやすさ}：システムは、ユーザーがそれを使って作業をすぐ始められるよう、簡単に学習できるようにしなければならない。
  1. @<b>{効率性}：システムは、一度ユーザーがそれについて学習すれば、後は高い生産性を上げられるよう、効率的な使用を可能にすべきである。
  1. @<b>{記憶しやすさ}：ユーザーがしばらくつかわなくても、また使うときにすぐ使えるよう覚えやすくしなければならない。
  1. @<b>{エラー発生率}：システムはエラー発生率を低くし、ユーザーがシステム試用中にエラーを起こしにくく、もしエラーが発生しても簡単に回復できるようにしなければならない。また、致命的なエラーが起こってはいけない。
  1. @<b>{主観的満足度}：システムは、ユーザーが個人的に満足できるよう、また好きになるよう、楽しく利用できるようにしなければならない。

「学習しやすさ」「記憶しやすさ」「エラー発生率」の3つは、ヤコブ・ニールセンの定義にしかなく、ヤコブ・ニールセンの定義のほうがより限定的といえるでしょう。

==== ユーザビリティが高いインターフェース
前述の定義から考えると、ユーザビリティが高い状態とは「特定のユーザーが特定の状況において、やりたいことが効率よくでき、嫌な思いをせず、また使いたいと思える」ということになります。

重要なのは「漠然としただれか」ではなく、「特定のユーザーと特定の状況」のことについて考える必要があるという点です。
この観点を忘れてしまうと、「誰のために作られたのかわからない平凡で使いにくいUI」ができあがってしまいます。

=== インタラクションデザイン
インタラクションデザインとは、ユーザーの操作・動作によって生じるシステムの変化・反応という、具体的な「やりとり」をデザインすることを指します。

ウェブアプリケーションは近年かなり複雑になりユーザーが操作する場面がとても増えたため、インタラクションデザインの重要度も高まっています。

ここでBob Baxley氏によるインタラクションデザインの分類をご紹介します。

  1. @<b>{人間とマシンのコミュニケーション（Human/machine communication ）}：もっとも基本的なインタラクションデザインは、技術とユーザーの間で行われる会話を翻訳する役割を果たします。翻訳者の役割では、インタラクションデザイナーは、両者の微妙なやりとりを理解し、容易かつ効率的に相互通信できるようにする必要があります。
  1. @<b>{操作と操作への応答（Action/Reaction）}：インタラクティブなメディアの動的な操作/反応は、インタラクションデザインの中心に位置しています。そのためデザイナーは、インタラクションがどのようにして展開され、どのような範囲でその順序が入れ替わる可能性があるのかを理解、予想できる必要があります。
  1. @<b>{状態（State）}：インタラクションデザインは、ユーザがアプリケーションの現在の状態を理解することにも関わります。人間が身振りやその場の状況から行動を決め、予測するのと同じように、インタラクティブなシステムは状態を伝達するので、ユーザーはどんな操作が可能または適切なのかを理解できます。
  1. @<b>{ワークフロー（Workflow）}：インタラクションデザインは、支払い方法の選択などの個別タスクの完了を容易にすることに加えて、アイテムの閲覧、選択、購入などのマルチタスク目標の完了にも関係します。映画監督が個々の場面を結合してシーンにし、シーンを結合して映画をつくるように、個々の画面要素を使用してページを作成し、複雑な操作を作成するページ、および完全なアプリケーションを作成する操作を使用します。
  1. @<b>{不具合（Malfunction）}：すべてのコミュニケーションと同様に、誤解や間違いは発生します。したがって、これらの問題を予測し、緩和し、ユーザーとシステムの両方が容易に回復できるようにすることも、デザイナーの役割の一部です。


=== その他

その他にも配色やフォントなどもUIの一部と考えられます。
しかし、そのあたりの話をするには「UIと装飾の境目はどこなのか？」問題について議論する必要が出てきそうなので、本書では割愛します。

もし配色やフォントに興味がある方は一般的なウェブデザイン入門の本などを読むとよいでしょう。

== なぜUIデザインは重要？



== エンジニアとUIデザインの関係

なぜエンジニアもUIデザインを知る必要があるのでしょうか。
その理由は多く2つあります。

=== エンジニアもUI開発の当事者である
Webアプリケーションエンジニアの仕事は@<b>{ユーザーインターフェースをつくること}です。
これはフロントエンドエンジニアもバックエンドエンジニアも変わりません。
たしかにバックエンドの開発は表に出ないかもしれませんが、APIの設計やパフォーマンスにはユーザーがどのようにそのプロダクトを利用するのかが大きく関わってきます。
UIのことを考えずに開発することはほぼ不可能でしょう。

また、デザイナーが考えたUIが最適ではない可能性もあります。
特に関わるデザイナーが少ない場合、そのデザイナーの主観に偏ってしまう場合も少なからずあります。
そういった場合に外の目線を提供し、プロダクトのUIをより使いやすく優れたUIにしていく手助けをすることができます。

=== デザインはロジカル
UIデザインは基本的にとてもロジカルなものです。
感覚的なものを排除し、論理的にUIを組み立てることがUIデザインの本質です。
そのロジックがどのように構成されているかを知れば、UIデザインについて自ずと理解できるでしょう。

UIデザインができるようになる必要はありません。
@<b>{なぜそのUIが良いのか}、というロジックの部分を理解することが重要なのです。

== プレグナンツの法則

ここではUIデザイン（主に画面デザイン）で用いられる@<code>{プレグナンツの法則}を紹介します。

プレグナンツの法則とは、ゲシュタルト心理学@<fn>{gestalt}における人間が物事を知覚のする際の法則です。
これを用いることでわかりやすい画面デザインができます。
//footnote[gestalt][@<href>{https://en.wikipedia.org/wiki/Gestalt_psychology}]

代表的なものは次の6つです。

==== 近接の要因

近くにある要素同士がグループとして知覚されやすいという法則です。

==== 類同の要因

同じような形、色、大きさの要素同士がグループとして知覚されやすいという法則です。

==== 閉合の要因

枠でくくられているものがグループとして知覚されやすいという法則です。

==== よい連続の要因

連続性が強いものがグループとして知覚されやすいという法則です。

==== よい形の要因

単純、対象、完結、規則性をもつ形はグループとして知覚されやすいという法則です。

==== 共同運命の要因

同じ動作をしている要素同士がグループとして知覚されやすいという法則です。
近接や類同の要因よりも強いといわれています。
形状よりも同じ動きをしている要素の方がまとまって知覚されます。

== まとめ

エンジニアでもUIを恐れる必要はありません。
ロジックを理解し、実装に生かし、より良いユーザーインターフェースの実装についてやっていきましょう！
