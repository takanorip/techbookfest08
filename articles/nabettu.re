= 残念UI見つけたらこう直そう！

こんにちは。渡邊と申します。普段WebサイトやReact Nativeを使ったアプリの受託開発などを行っております。

この章ではWebサイトを製作・閲覧する上で「ここのUI残念だな」となってしまうポイントについて、残念なポイントと具体的な修正方法を書いていこうと思います。

読者のみなさまにおかれましては、この章にある項目が自身の製作するWebサイトに当てはまってないかを確認していただいて、効果がありそうな部分から順次取り入れていただければと思います。

それでは早速残念UIの一例から、その修正方法を記述していきたいと思います。

== 「なんかかっこいいデザイン」よりも「ユーザーの認知コストが低いデザイン」に寄せよう

まずは実装する前の段階から残念なUIが生まれることを防ぐことを心がけましょう。

実際に私も遭遇したことがありますが、「チェックボックスとラジオボタンの見た目（丸と四角）が逆」など、Web業界での経験が浅いデザイナーだと従来のブラウザの挙動を無視してデザインカンプを作ってしまう方がいます。そういった方には「ブラウザ標準はこうなっている」というのをしっかり説明して理解してもらいましょう。

斬新なデザインはユーザーに認知するコストが発生します。そして認知コストが高いUIは離脱率の上昇につながってしまいます。よっぽどのことがなければ、既存のWebサイトと大きく逸脱しないUIにしたほうがよいでしょう。

独自色を出すとしてもその効果がはっきり分かるようなUIにすることを心がけてください。たとえば「いいね」機能などはFacebookを始めとして色々なサービスに取り入れられています。投稿のすぐ下にいいねボタンと似たデザインのボタンがあったら「いいねと同じ機能のボタン」だとわかりやすいので、独自のデザインでもある程度寄せたデザインにしてユーザーの認知コストを下げましょう。

//image[nabettu_iinebtn][hasunoha.jpの「有り難し」ボタン][scale=0.3]{
//}

ブラウザの標準スタイルのハイパーリンクは青色で下線がついています。デザイン的に「リンクなのに下線がない」または「色が青以外のもの」にする場合でも、

 - マウスオーバー時に下線を付与する
 - 色を本文とはっきり分ける
 - 背景色と被らないような色にする

 などの実装を心がけましょう。

また、強調なのかリンクなのか分かりづらいとユーザーも混乱してしまいますので注意しましょう。

== スマホ・タブレットでよくある残念UI

=== 横スクロールが発生している

まずスマホでサイト閲覧していて一番良く遭遇するのは意図せず「横スクロール」が発生しているサイトですね。横スクロールがあると、縦にスワイプして閲覧している際に横にスワイプの挙動が持ってかれてしまってスクロールが止まります。これは非常に残念なので、コンテンツをラップしている要素に次のようなCSSを当てて回避しましょう。

//listnum[scroll][style.css][css]{
#container {
    width: 100%;
    word-wrap: break-word;
    overflow: hidden;
}
//}

word-wrapはURLの表記等が本文中にあった際に、改行されず画面からはみ出てしまうのを防ぎます。

端末確認では小さめ端末（iPhoneSE等）で見た場合にだけ要素がはみ出ている場合もありますので、念入りに行いましょう。@<b>{特にYouTubeの埋め込みややAdsenseなどの広告タグがはみ出がち}です。

=== 横向きにした際にレイアウトが崩れる

fixedでコンテンツを配置している場合や、モーダルを表示した際等に、画面に入りきらずにレイアウトが崩れることがあります。スマホで横向きで閲覧する人はほぼいませんが、意図しない挙動を行わないためにもレイアウトを調整するか、「このコンテンツは縦向き専用です」という表示を出すといいでしょう。

一例ですが、CSSのmediaクエリで向きを検知できるので、スマホの場合は次のようなCSSで landscapeModal を表示して縦向きに直すことを促しましょう。

//listnum[landscape][style.css][css]{
@media screen and (orientation: landscape) {
   .landscapeModal {
       display: block;
   }
}
@media screen and (orientation: portrait) {
  .landscapeModal {
      display: none;
  }
}
//}

=== fixedでレイアウト固定している要素がはみ出る

これも基本的にfixedでレイアウト固定している要素においてボタンが画面下に配置されており、画面サイズが考慮されておらずボタンが押せなくなるなどの症状が出ているサイトをたまに見かけます。

ブラウザのメニューとかぶってしまってボタンが押せなかったり、要素がはみ出て閲覧出来ない等があるので、fixedの要素ではできるだけpadding-bottomを多めに取り、なおかつスクロール可能にしましょう。

//listnum[fixed][style.css][css]{
.modal {
  position: fixed;
  overflow: scroll;
  max-height: 90vh;
  padding-bottom: 100px;
}
//}

特にiOSのfacebookのアプリ内WebViewではメニューの幅が大きい上に、cssで100vhで指定しているはずなのに画面からはみ出ることがあります。

=== 画像アップロードすると勝手に横に回転する

iOS限定の動作ですが、写真をアップロードすると向きが合っていない状態で表示されてしまう場合があります。iOSでは画像データと別で、写真の向きがexifにorientationという項目で入っているためです。

img要素の直接ファイルを入力するとたいていのブラウザがorientationを読んで向きを修正してくれますが、canvas等で表示すると画像データのみとなってしまうため向きが変わってしまうことがあります。

JavaScript-Load-Imageなどのnpmを利用して、向きを修正してから表示するといいでしょう。

//quote{
JavaScript-Load-Image

@<href>{https://github.com/blueimp/JavaScript-Load-Image}
//}

=== iOSでhoverをつけておくと1回でタップが反応しない

これはiOSのバグなのですが、CSSでhoverをつけておくと1tap目でhover、2tap目でクリック扱いになる場合があります。その場合は次のようなCSSでPCなどのhoverが可能な場合にのみ動作させるようにすると解決します。

//listnum[hover][style.css][css]{
@media (hover: hover) {
  a:hover {
    opacity: 0.75;
  }
}
//}

== PCでよくある残念UI

=== 固定ヘッダーが横スクロールしてもついてこない

fixedでなおかつmin-widthを設定して作っておいたヘッダーは、画面がそのmin-width未満になった際に横スクロールしてもついてこないためはみ出た要素にアクセスできないという状況になります。

これはJavaScriptで横スクロールを検知して、スクロールした分ヘッダーを横にずらす処理を加えましょう。

サンプルとしてjQueryでの実装を載せておきます。React.jsやVueでも書き方は変わりますが同じように実装可能です。

//listnum[header-scroll][index.js][]{
$header = $(".header");
window.addEventListener("scroll", ()=>{
  $header.css("left" , -window.scrollX);
}, false);
//}

=== 横スクロールをさせるコンテンツがある

Windowsだと@<b>{そもそも横スクロールがタッチパッドでできる端末が少なかったり}しますし、マウスで操作していた場合は絶望的です。そしてMacだとしても@<b>{ミスってブラウザバックしてしまう}ので、できるだけ横スクロールコンテンツは控えましょう。

=== レスポンシブじゃないのに最小サイズが設定されていない

レスポンシブに作るのは結構大変です。PCとSPで2つ分デザインを作って終わりというサイトも多いでしょう。しかしその場合にSPでないデザインを表示する際にはレイアウトが崩れない最小サイズ設定としてCSSのmin-widthの設定をしてください。

=== クリッカブルな要素と分かる工夫

ボタンやリンク要素の上にマウスカーソルを置いたら、@<b>{クリックできるかどうかをユーザーに認知してもらうためにマウスカーソルがポインターに変わるように}しましょう（OSにもよりますが、手の形）。さらに押せる時には見た目も変化させるとよりわかりやすいです。

同じボタンでも、押せない状態の場合はしっかり解除することでユーザーも押せないボタンを一生懸命クリックするようなことが防げます。逆に演出的効果もないのにマウスオンした状態で見た目が変わるけど、リンクでもなんでもない要素があるとユーザーが混乱してしまうので注意しましょう。

=== スマホ用サイトなのはわかったけど、、、

PCでアクセスした際に「こちらはスマートフォン専用サイトです」とURLが書いてあるだけのサイトがあったりします。せめてメールなどのリンクや、クリップボードにコピーするボタン、またスマホ用にQRコードを画面においてもらえるとユーザーも助かり離脱率も下がります。

=== 触りたいのに閉じちゃうもどかしいメニュー

メニューがマウスオーバーで開くタイプのものがあります。クリックで開くよりも楽に項目が見れるので便利ですが、逆に開いた状態でキープしたいのにマウスカーソルが少しずれただけで一瞬で閉じてしまう場合があります。

その場合はマウスが離れてからもほんの少しだけ待ってから閉じるように修正しましょう。しかし待ちすぎも今度はメニューが邪魔になってしまうので調整が必要です。

== ちょっとした気遣いで使いやすさがアップ！

この章ではちょっとした気遣いを実装することで使いやすさがちょっぴり向上するような項目について書いていきます。

=== カルーセル特有のUI等

実装することが多いカルーセルですが、特に何も考えずに実装すると気になるポイントが出てきてしまいます。

まずは自動でスクロールするスライダーはマウスオンで止まってほしいですね。Slick.jsで実装されているカルーセルは標準でマウスオーバーで止まる様になっています。

そしてカルーセルのスライドが今何枚目かを表すナビゲーション（カルーセル以外にも結構ありますが）を表示するときの注意点があります。

//image[nabettu_slide][よくあるカルーセルスライダー][scale=0.8]{
//}

こちらのサンプルのスライダーの下の部分のように"丸ポチ"デザインがよくあると思いますが、このようなデザインを作る際には@<b>{実際の見た目とクリック領域を別で定義しておきましょう}。

丸の領域だけをクリックできるようにしてあると、あまりにも小さくクリックしづらすぎるためです。Appleのデザインガイドラインではボタンなどの要素は44px*44px以上の領域を確保するよう指示してあります。そのため44px以上のクリック領域を見えない形で定義しておいて、実際の丸ポチは見た目だけにしておきましょう。

サンプルとして実際のクリック領域を .slider__navigation として丸ポチをその疑似要素（after）としてCSSを記述しておきます。

//listnum[slide][style.scss][css]{
.slider__navigation { 
  //クリックできるナビゲーション
  margin: 10px;
  width: 44px;
  display: inline-block;
  text-align: center;
  &:after {
    //丸ポチ部分
    content: "";
    display: inline-block;
    margin: 0 auto;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #000;
  }  
}
//}

=== 特殊な処理は必ずユーザーに許可を求めよう

なにげなくブラウジングをしていて、突然音が出たり位置情報の許可を求めるポップアップが出たりするとそれだけで「怪しいサイトにきちゃったな」と離脱したくなってしまいます。リッチなコンテンツを作る上で大切な要素だとしてもユーザーにとってマイナスな印象を与えてしまっては本末転倒ですので、必ずユーザーにワンステップ確認画面を踏んでもらってから実行しましょう。

Twitter認証なども同じで、Webサービスにいきなり認証に行くよりも確認画面を挟んでからのほうがユーザーは安心して認証を行えます。

//quote{
認証確認画面が丁寧なWebサービス「マシュマロ」の確認画面

@<href>{https://marshmallow-qa.com/auth/explanation}
//}

PC向けのメディアでよくあるのが、アクセスするとブラウザの通知の許可を求めるポップアップを出すものがあります。

これはいきなり出てきてもユーザーはほぼ100%否認します。その上後から再度許可を取りたい場合はユーザーが個別で否認した設定を消す必要が出てきてしましますので、必ずユーザーが自ら「購読開始」ボタンなどを押してから許可を取りに行きましょう。

=== aタグの処理

aタグで指定するリンクは、基本的にはサイト内リンク（同ドメイン）は同じタブ、別サイト（別ドメイン）は違うタブ（target="_blank"を付与）しましょう。

また、ページ内リンク（href="#about"などの#始まり）がスムーススクロールでないと、パっと画面が変わってしまうのでページ遷移と見分けがつきずらいです。JavaScriptでリンクのイベントをキャンセルして目的のタグまでスムーススクロールを実装しましょう。

=== コンテンツ内画像をタップすると勝手に別ウィンドウが開く

WordPressやはてなブログの標準設定でそうなっているテーマがあります。ユーザーも拡大したい場合にはブラウザの標準機能で拡大するほうが慣れているため、わざわざタップしてウィンドウまたはモーダルが開かなくとも拡大できますので、OFFにしましょう。

=== モーダルのコンテンツ外をタップしても閉じない

モーダルは基本的に右上に閉じるボタンを配置していると思いますが、それ以外の部分をタップしても閉じると、わざわざ指をのばさなくてもいいので楽です。また、PCの場合はEscキーで閉じるようになっていると個人的には嬉しいです。

=== ファーストビューが全画面なのはかっこいいんだけど、、、

全画面ファーストビューの@<b>{下にコンテンツあるのか気づけない}場合があります。特にはじめての訪問時に画面いっぱいのコンテンツで終わりなのかな？と離脱されてしまってはせっかくのサイトも台無しです。

その場合はたとえば２秒スクロールしなかったら「scroll↓」という表示を画面の下の方に出すと、ユーザーにも伝わりやすいと思います。

=== お問い合わせはフォーム？？？

なにか問い合わせ・要望などを送りたくなっても、フォームでなくメールになると一気にハードルが上がってしまいます。

しかも@<b>{リンクと思ったらメールだった場合はすぐ離脱}しかねません。もし運用の都合上メールにするならメールのアイコンをお問い合わせのリンク横につけましょう。

フォームはGoogle Formやformrunというサービスを利用してそのリンクにしておくのが手軽です。

== Web製作の鬼門：フォーム周り

=== input スクロール出来ない問題

inputタグは、テキストが欄からはみ出ている場合にスクロールが出来ないため非常に不便です。

入力項目の長さが決まっていない場合には、できればtextareaタグを利用してoverflow: scrollを設定しましょう。

さらにinputでは改行が禁止でしたが、textareaにすると改行が入力できてしまいます。禁止したい場合は、textareaの変更をJavaScriptで検知し、改行が含まれていた場合は削除するようにしましょう。

//listnum[textarea][index.js][js]{
const $textarea = $(".textarea")
$textarea.on("change", e => {
  const inputText = e.target.value;
  if(inputText.match(/\n/g)){
    $textarea.val(inputText.replace(/\n/g, ""));
  }
})

=== inputタグのplaceholderはfocusすると消えることを覚えておこう

placeholderは実際に値を入力しようとすると見えなくなってしまいます。フォームのアンチパターンのひとつとして、このplaceholderに@<b>{入力する項目名}を入れてしまっている場合があります。フォームは表示される項目が多くなりがちなため、できるだけ要素を減らすデザインをした場合の弊害です。

基本的には実際にそこに入るであろう一例をplaceholderへ入れておいて、項目名はlabelタグとして別で表示しておきましょう。

=== 住所入力のストレス

郵便番号を入れたら住所を補完してくれる機能は必ずいれてください。JavaScriptだけで完結するものや、RoR用のgemもあります。

//quote{
JavaScriptのみで住所変換をしてくれるライブラリ

@<href>{https://github.com/ajaxzip3/ajaxzip3.github.io}
//}

また、エラー文言で@<b>{「半角数字は入れられません」と表示されていると「そんなこというなら勝手に変換してくれ〜」}となるので、こちらも自動で変換しましょう。半角全角は文字コードをいくつかシフトさせるだけで可能です。

//listnum[zenkaku][index.js][js]{
// 英数字を半角にする
str.replace(/[Ａ-Ｚａ-ｚ０-９]/g, s => {
    return String.fromCharCode(s.charCodeAt(0) - 65248);
});

// 英数字を全角にする
str.replace(/[A-Za-z0-9]/g, s => {
    return String.fromCharCode(s.charCodeAt(0) + 65248);
});
//}

=== エラーはどこで出す？

フォームのバリデーションは基本的には「全面的にサーバーで行うほうがコストは低い」です。たとえクライアント側でバリデーションをかけたとしてもサーバー側のバリデーションは必ず必要だからです。

しかし入力項目が多くなってくると、ユーザーもどこが間違っているのかが都度わかったほうがミスも少なくなり負荷が軽減します。ECサイトなどではフォームの使いづらさによる離脱は深刻な問題になってきます。

そのため。入力項目の不備は最後まで行って「送信する」ボタンを押す前に、@<b>{入力欄から離れた瞬間に判別して表示}してくれるとありがたいです。注意点としてはクライアント側のバリデーションとサーバー側のバリデーションが必ず一致するようにしてください。これが食い違うと、OKなはずのデータが送れないという混乱を招きます。

もしクライアント側での判別が難しい場合の代替案としては、入力項目が多かった場合に「５個づつで画面を分けて入力していけるようにする」ことや、「エラーが出たらエラーの部分までスクロールを戻す」などの施策で、なんとかユーザーが離脱しないように工夫をしていきましょう。

== まとめ

いかがでしたでしょうか。みなさんも普段ブラウジングをしていて出会ったことがあるものもあったのではないでしょうか。

これらすべてを網羅する必要はもちろんありませんが、@<b>{満たしていないことでユーザーのストレスにつながる項目がある}と思いますので、今後サイト製作をしていくうえで考慮していただけると幸いです。